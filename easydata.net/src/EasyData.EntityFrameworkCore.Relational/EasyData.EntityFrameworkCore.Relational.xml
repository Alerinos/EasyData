<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyData.EntityFrameworkCore.Relational</name>
    </assembly>
    <members>
        <member name="M:EasyData.EntityFrameworkCore.MetaDataEfCoreExtensions.LoadFromDbContext(EasyData.MetaData,Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Loads the model from a database context.
            </summary>
            <param name="model">A DbModel object.</param>
            <param name="context">A DbContext object to load the model from.</param>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.MetaDataEfCoreExtensions.LoadFromDbContext(EasyData.MetaData,Microsoft.EntityFrameworkCore.DbContext,EasyData.EntityFrameworkCore.DbContextMetaDataLoaderOptions)">
            <summary>
            Loads the model from a database context.
            </summary>
            <param name="model">A DbModel object.</param>
            <param name="context">A DbContext object to load the model from.</param>
            <param name="options">Different options</param>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsInheritedFrom(System.Type,System.String)">
            <summary>
            Determines whether the type is inherited from another type specified by the specified full type name.
            </summary>
            <param name="type">The type to check the inheritence for.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <returns><c>true</c> if is inherited from the type specified byt its full type name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsInheritedFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type is inherited from another type.
            </summary>
            <param name="type">The type to check the inheritence for.</param>
            <param name="baseType">The base type.</param>
            <returns><c>true</c> if is inherited from the type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsInheritedFromGeneric(System.Type,System.Type)">
            <summary>
            Determines whether the type is inherited from generic type.
            </summary>
            <param name="type">The type to check the inheritence for.</param>
            <param name="baseType">The base type.</param>
            <returns></returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsSimpleType(System.Type)">
            <summary>
            Checks if the type can be used in columns and conditions
            </summary>
            <param name="t">The type.</param>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsComplexType(System.Type)">
            <summary>
            Determines whether the specified type is complex type (marked by ComplexType attribute).
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a complex type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsGenericType(System.Type)">
            <summary>
            Determines whether the specified type is generic type.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a generic type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is an enumeration.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a enumeration type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is a nullable type.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a nullable type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsAttributeDefined(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Determines whether the attribute with specified name is defined for the property.
            </summary>
            <param name="pi">A PropertyInfo object which defines the property</param>
            <param name="attrName">Name of the attribute.</param>
            <returns><c>true</c> if "attrName" attribute is defined for "pi" property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.GetMappedProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Filters the list of properties (defined by source parameter) to return only those which does not have "NotMapped" attribute.
            </summary>
            <param name="source">The source list of properties.</param>
            <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determines whether the specified type is enumerable (supports <see cref="T:System.Collections.Generic.IEnumerable"/> interface.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type to check is enumerable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderException">
            <summary>
            Represents exception class for <see cref="T:EasyData.EntityFrameworkCore.DbContextMetaDataLoader"/>
            </summary>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderException.#ctor(System.String)">
            <summary>
            nitializes a new instance of the <see cref="T:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderException" /> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderOptions">
            <summary>
            Contains different options for <see cref="T:EasyData.EntityFrameworkCore.DbContextMetaDataLoader"/>
            </summary>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderOptions.Filters">
            <summary>
            The Filtes
            </summary>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderOptions.AddFilter(System.Func{Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean})">
            <summary>
            Adds a filter, which will be used during model loading from <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> 
            </summary>
            <param name="filter"></param>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderOptions.HidePrimaryKeys">
            <summary>
            Gets or sets a value indicating whether we need to hide primary key fields in the data model.
            </summary>
            <value><c>true</c> if the primary key fields must be hidden; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.DbContextMetaDataLoaderOptions.SkipForeignKeys">
            <summary>
            Gets or sets a value indicating whether we need to skip foreign key fields and don't include them into the data model.
            </summary>
            <value><c>true</c> if the foreign key fields must be skipped; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:EasyData.EntityFrameworkCore.Relational.Services.FullTextSearchOptions">
            <summary>
            Contains options for full text search
            </summary>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.Relational.Services.FullTextSearchOptions.Filter">
            <summary>
            Lamda expression, which filters properties to use in full text search
            </summary>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.Relational.Services.FullTextSearchOptions.OrderBy">
            <summary>
            The name of the property to order by the result list
            </summary>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.Relational.Services.FullTextSearchOptions.IsDescendingOrder">
            <summary>
            if set to <c>true</c> then we use descending order
            </summary>
        </member>
        <member name="P:EasyData.EntityFrameworkCore.Relational.Services.FullTextSearchOptions.Depth">
            <summary>
            Depth of full text search. 
            </summary>
        </member>
        <member name="M:EasyData.EntityFrameworkCore.Relational.Services.LinqExtensions.FullTextSearchQuery``1(System.Linq.IQueryable{``0},System.String,EasyData.EntityFrameworkCore.Relational.Services.FullTextSearchOptions)">
            <summary>
            Filters a sequence of values based on a fulltext search predicate 
            </summary>
            <typeparam name="T">Any type</typeparam>
            <param name="source">The source - some IQueryable object.</param>
            <param name="text">The text - meaning of the search</param>
            <param name="options">The options for full-text search</param>
            <returns></returns>
        </member>
    </members>
</doc>
